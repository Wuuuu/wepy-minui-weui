<style lang="less" scoped>
.schedule-container {
  background: #fff;
  .calendar-container {
    .calendar-header {
      display: flex;
      text-align: center;
      justify-content: center;
      align-items: center;
      height: 100rpx;
      .prev-month, .next-month {
        flex: 0 0 180rpx;
      }
      .cur-month {
        flex: 1;
      }
    }
    .calendar-week {
      display: flex;
      justify-content: center;
      align-items: center;
      border-bottom: 1px solid #efefef;
      .weeks-grid {
        text-align: center;
        flex: 107.1428571429rpx;
        color: #dd5044;
      }
    }
    .calendar-days {
      display: flex;
      flex-wrap: wrap;
      .days-grid {
        // text-align: center;
        height: 100rpx;
        width: 107.1428571429rpx;
        border-bottom: 1px solid #eee;
        .day {
          margin: 20rpx auto;
          width: 60rpx;
          height: 60rpx; 
          line-height: 60rpx;
          text-align: center;
          font-size: 28rpx;
        }
        .day-active {
          border: 1px solid #dd5044;
          border-radius: 50%;
        }
      }
    }
    .calendar-close {
      margin-top: 60rpx;
      image {
        display: block;
        margin: 0 auto;
        width: 60rpx;
        height: 60rpx;
      }
    }
  }
  .header {
    display: flex;
    height: 100rpx;
    border-bottom: 1px solid #efefef;
    .last-week {
      text-align: right;
    }
    .last-week, .next-week {
      flex: 0 0 180rpx;
      line-height: 110rpx;
      wxc-icon {
        color: #dd5044;
      }
    }
    .date {
      flex: 1;
      line-height: 110rpx;
      text-align: center;
    }
  }
  .content {
    .day{
      display: flex;
      margin-bottom: 20rpx;
      border-bottom: 1px solid #efefef;
      .item-box{
        flex: 0 0 14.2857%;
        text-align: center;
        .item-box-border {
          border-right: 1px solid #eee;
          .item-img {
            width: 100%;
            height: 40rpx;
            image {
              position: relative;
              top: 2rpx;
              left: 26rpx;
              width: 40rpx;
              height: 40rpx;
            }
          }
          .week-day {
            font-size: 24rpx;
            color: rgba(0, 0, 0, 0.8)
          }
          .week-item {
            padding-bottom: 12rpx;
            font-size: 24rpx;
          }
        }
      }
      .item-box:active {
        background: rgb(216, 63, 63);
      }
      .item-box-active {
        color: #dd5044;
        background: #F4CFCF;
      }
    }
    .my-lesson {
      display: flex;
      padding: 30rpx 18rpx;
      margin-top: 8rpx;
      background: #EEE;
      .my-lesson-time {
        flex: 0 0 160rpx;
        padding: 8rpx 20rpx;
        text-align: center;
        font-size: 28rpx;
      }
      .my-lesson-brief {
        flex: 1;
        .teacher, .place {
          font-size: 28rpx;
          color: #888;
        }
      }
      .my-lesson-icon {
        flex: 0 0 70rpx;
        image {
          display: block;
          padding-top: 55rpx;
          margin: 0 auto;
          width: 50rpx;
          height: 50rpx;
        }
      }
    }
  }
  .footer {
    position: fixed;
    bottom: 0;
    width: 100%;
    max-width: 100%;
    height: 100rpx;
    background: #fff;
    .item {
      margin-top: 20rpx;
      width: 140rpx;
    }
    .status-icon {
      margin: 0 auto;
      width: 36rpx;
      height: 36rpx;
      border-radius: 50%;
    }
    .text {
      text-align: center;
      font-size: 28rpx;
    }
  }
}
.item-box-border:last-child {
  border: none;
}
.notLogin {
  position: fixed;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.6);
  .login-in {
    background: #dd5044;
    text-align: center;
    width: 300rpx;
    height: 90rpx;
    line-height: 90rpx;
    color: #fff;
    border-radius: 12rpx;
  }
}
</style>
<template>
<view class="schedule-container">
  <block wx:if="{{unionuser}}">
    <!-- Êó•ÂéÜË°®üìÖ -->
    <wxc-mask status="{{maskStatus}}" background-color="#fff" opacity="1" class="mask-animation">
      <view class="calendar-container">
        <view class="calendar-header">
          <view class="prev-month" @tap="handleCalendar" data-action="prev">‰∏ä‰∏ÄÊúà</view>
          <view class="cur-month">{{currentDate}}</view>
          <view class="next-month" @tap="handleCalendar" data-action="next">‰∏ã‰∏ÄÊúà</view>  
        </view>
        <view class="calendar-week">
          <repeat for="{{weeks_ch}}" item="week">
            <view class="weeks-grid">{{week}}</view>
          </repeat>
        </view>
        <view class="calendar-days">
          <view wx:if="{{true}}" class="days-grid" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}"></view>
          <repeat for="{{days}}" key="key" index="index" item="item">
            <view class="days-grid  " @tap="handleDayItem({{item.dayDate}})">
              <view class="day {{item.choosed ? 'day-active' : ''}}">{{item.day}}</view>
            </view>
          </repeat>
        </view>
        <view class="calendar-close" @tap="closeCalendar">
          <image src="../assets/icon/iconfont-close.png" />
        </view>
      </view>
    </wxc-mask>
    <!-- È°∂ÈÉ® -->
    <view class="header">
      <view class="last-week" @tap="handleChangeWeek('last')"><wxc-icon size="35" type="arrow-left"/> ‰∏ä‰∏ÄÂë®</view>
      <view class="date" @tap="handleCalendarShow">{{currentDate}}</view>
      <view class="next-week" @tap="handleChangeWeek('next')">‰∏ã‰∏ÄÂë® <wxc-icon size="35" type="arrow-right" /></view>
    </view>
    <!-- content -->
    <view class="content">
      <view class="day">
        <repeat for="{{week}}" index="index" item="item">
          <view class="item-box {{ item.date == currentDate ? 'item-box-active' : ''}} " @tap="handleQuerySelectedDay" data-index="{{index}}"> 
            <view class="item-box-border">
              <view class="item-img">
                <block wx:if="{{item.list.length == 0 ? false : true}}">
                  <image src="../assets/icon/lesson-icon-active.png"/>
                </block>
              </view>
              <view class="week-day">{{item.day}}</view>
              <view class="week-item">{{item.week}}</view>
            </view>
          </view>
        </repeat>
      </view>
      <!-- ËØæÁ®ãË°® -->
      <scroll-view scroll-y style="height: 500px;" >
        <block wx:if="{{currentDayData.length == [] ? true : false}}">
          <wxc-abnor type="DATA" title="‰ªäÂ§©Ê≤°ÊúâËØæÁ®ã"></wxc-abnor>
        </block>
        <block wx:else>
          <repeat for="{{currentDayData}}" key="key" index="index" item="item">
            <view class="my-lesson" style= "background: {{item.courseType == 0 ? '#EEE' : (item.courseType == 1 ? '#F4CFCF' : '#C1E7D6')}}" @tap="handleToDetail({{item.id}})">
              <view class="my-lesson-time">
                <view>{{item.startTime}}</view>
                <view>--</view>
                <view>{{item.endTime}}</view>
              </view>
              <view class="my-lesson-brief">
                <view class="name">{{item.course.name}}</view>
                <view class="teacher">‰∏äËØæËÄÅÂ∏àÔºö {{item.teacher.name}}</view>
                <view class="place">‰∏äËØæÂú∞ÁÇπÔºö{{item.classroom.name}}</view>
              </view>
              <view class="my-lesson-icon">
                <image src="../assets/icon/iconfont-nav-right-arrow.png" /> 
              </view>
            </view>
          </repeat>
        </block>
      </scroll-view>
    </view>
    <!-- <wxc-loading is-show="{{loadingIcon}}"></wxc-loading> -->
    <!-- Â∫ïÈÉ® -->
    <view class="footer">
      <wxc-flex class="footer-box" main="center">
        <repeat for="{{[{color:'#EEE',text: 'Â∑≤‰∏äËØæ'},{color:'#C1E7D6',text:'‰∏äËØæ‰∏≠'},{color:'#F4CFCF',text:'Êú™‰∏äËØæ'}]}}" item="item">
        <view class="item">
          <view class="status-icon" style="background: {{item.color}}"></view>
          <view class="text">{{item.text}}</view>
        </view>
        </repeat>
      </wxc-flex>
    </view>
  </block>
  <block wx:else>
    <view class="notLogin">
      <view class="login-in" @tap="handletologin">ÁôªÂΩïÂêéÊü•Áúã</view>
    </view>
  </block>
</view>
</template>
<script>
  import wepy from 'wepy'
  import * as services_lesson_subject from '../services/lesson/subject'
  import * as services_calendar_week from '../services/schedule/schedule'
  import * as services_courses_detail from '../services/lesson/detail'

  import config from '../config/config'

  const moment = require('../utils/moment')

  export default class Schedule extends wepy.page {
    config = {
      navigationBarTitleText: 'ËØæÁ®ãË°®',
      navigationBarTextStyle: 'white',
      navigationBarBackgroundColor: '#dd5044',
      usingComponents: {
        'wxc-icon': '../packages/@minui/wxc-icon/dist/index',
        'wxc-flex': '../packages/@minui/wxc-flex/dist/index',
        'wxc-cc': '../packages/@minui/wxc-cc/dist/index',
        'wxc-mask': '../packages/@minui/wxc-mask/dist/index',
        'wxc-abnor': '../packages/@minui/wxc-abnor/dist/index',
        'wxc-popup': '../packages/@minui/wxc-popup/dist/index',
        'wxc-loading': '../packages/@minui/wxc-loading/dist/index'
      }
    }
    components = {
    }
    data = {
      week: [{week: 'Âë®Êó•'},{week: 'Âë®‰∏Ä'},{week: 'Âë®‰∫å'},{week: 'Âë®‰∏â'},{week: 'Âë®Âõõ'},{week: 'Âë®‰∫î'},{week: 'Âë®ÂÖ≠'}],
      currentDate: moment().format("YYYY-MM-DD"),  // Ëé∑ÂèñÂΩìÂâçÊó•Êúü YYYY-MM-DD
      thisMonthDays: [],                                // Ëé∑ÂèñÂΩìÂâçÊúà‰∏ÄÂÖ±Â§öÂ∞ëÂ§©
      currentMonth: parseInt(moment().format("MM")),             // ÂΩìÂâçÊúà‰ªΩ
      currentYear: moment().year(),               // ÂΩìÂâçÂπ¥‰ªΩ
      currentDay: moment().dayOfYear(),               // ÂΩìÂâçÂ§©
      days: [],     // ÊØè‰∏™ÊúàÁöÑÊØèÂ§©Êï∞ÁªÑ
      weeks_ch: [],
      empytGrids: [],
      hasEmptyGrid: false ,
      maskStatus: 'hide',
      todayEntity: [],
      currentDayData: [],
      unionuser: null
    }
    methods = {
      // Êìç‰Ωú'‰∏ä‰∏ÄÂë®','‰∏ã‰∏ÄÂë®'
      handleChangeWeek (params) {
        let self = this
        const { currentDate, week } = self.data
        if(params == 'next') {
          let getNextWeek = moment(currentDate).add(7, 'd').format("YYYY-MM-DD")  // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÁöÑ‰∏ã‰∏ÄÂë®
          let nextWeekOfFirstDay =parseInt(moment(getNextWeek).startOf('week').format("DD")) // Ëé∑Âèñ‰∏ã‰∏ÄÂë®ÁöÑÁ¨¨‰∏ÄÂ§© DD
          let nextWeekFirstDayOfDate = moment(currentDate).add(7, 'd').startOf('week').format("YYYY-MM-DD")  // Ëé∑Âèñ‰∏ã‰∏ÄÂë®ÁöÑÁ¨¨‰∏ÄÂ§©ÁöÑÊó•Êúü YYYY-MM-DD
          for(let i=0;i<7;i++) {
            week[i].day = moment().dayOfYear(nextWeekOfFirstDay+i).format("DD")
            week[i].date = moment(nextWeekFirstDayOfDate).add(i, 'd').format("YYYY-MM-DD")
          }
          self.currentDate = getNextWeek
          self.week = week
          // console.log('‰∏ã‰∏ÄÂë®7Â§©ÁöÑÊï∞ÊçÆÔºö', week)
          self.$apply()
          // self.queryWeekSchedule(week[0].date,week[week.length-1].date)
          self.querySchedule(week[0].date,week[week.length-1].date)
        } else {
          let getPrevWeek = moment(currentDate).subtract(7, 'd').format("YYYY-MM-DD") // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÁöÑ‰∏ä‰∏ÄÂë®
          let prevWeekOfFirstDay = parseInt(moment(getPrevWeek).startOf('week').format("DD"))
          let prevWeekFirstDayOfDate = moment(currentDate).subtract(7, 'd').startOf('week').format("YYYY-MM-DD")
          for(let i=0;i<7;i++) {
            week[i].day = moment().dayOfYear(prevWeekOfFirstDay+i).format("DD")
            week[i].date = moment(prevWeekFirstDayOfDate).add(i, 'd').format("YYYY-MM-DD")
          }
          self.currentDate = getPrevWeek
          self.week = week
          self.$apply()
          // self.queryWeekSchedule(week[0].date,week[week.length-1].date)
          self.querySchedule(week[0].date,week[week.length-1].date)
        }
        
      },
      handleToDetail (params) {
        this.$navigate(`./scheduleDetail/scheduleDetail`, {id: params})
      },
      // Êó•ÂéÜÊìç‰Ωú‰∏äÊúà,‰∏ãÊúà
      handleCalendar (e) {
        let self = this
        const { action } = e.currentTarget.dataset
        const { currentDate } = self.data
        if (action == 'prev') {
          let prevMonth = self.currentMonth -1 
          let prevYear = self.currentYear
          console.log(`prev:${prevYear}-${prevMonth}`)
          if(prevMonth < 1) {
            prevYear = self.currentYear - 1
				    prevMonth = 12
          }
          self.calDays(prevYear, prevMonth)
          self.calEmptyGrid(prevYear, prevMonth)

          self.currentYear = prevYear
          self.currentDate = moment(currentDate).subtract(1, 'months').format("YYYY-MM-DD")
          self.currentMonth = prevMonth
          self.$apply()
          console.log(`ÂΩìÂâçÊó•ÊúüÔºö${currentDate}`)
        } else {
          let nextMonth = self.currentMonth + 1
          let nextYear = self.currentYear
          if (nextMonth > 12) {
            nextYear = self.currentYear + 1 
            nextMonth = 1
          } 
          self.calDays(nextYear, nextMonth)
          self.calEmptyGrid(nextYear, nextMonth)

          self.currentYear = nextYear
          self.currentMonth = nextMonth
          self.currentDate = moment(currentDate).add(1, 'months').format("YYYY-MM-DD")
          self.$apply()
          console.log(`ÂΩìÂâçÊó•ÊúüÔºö${currentDate}`)
        }
        // console.log(action)
      },
      // ÈÄâ‰∏≠ÂΩìÂâçÊúà
      handleDayItem (params) {
        let self = this
        const { week } = self.data
        const theWeekFirstDayOfDate = moment(params).startOf('week').format("YYYY-MM-DD") // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÁ¨¨‰∏ÄÂ§©
        const theWeekLastDayOfDate = moment(theWeekFirstDayOfDate).add(6, 'd').format("YYYY-MM-DD") // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÊúÄÂêé‰∏ÄÂ§©

        for(let i=0;i<7;i++) {
          week[i].day = moment(theWeekFirstDayOfDate).add(i, 'd').format("DD") // ÂàùÂßãÂåñweekÊï∞ÁªÑ
          week[i].date = moment(theWeekFirstDayOfDate).add(i, 'd').format("YYYY-MM-DD") // ÂàùÂßãÂåñweekÊï∞ÁªÑ
        }
        // console.log('handleDayItem‰∏≠ÁöÑWeek:', week)
        self.currentDate = params
        self.maskStatus = 'hide'
        self.$apply()

        self.querySchedule(theWeekFirstDayOfDate, theWeekLastDayOfDate)
      },
      handleCalendarShow () {
        this.maskStatus = 'show'
        this.$apply()
      },
      closeCalendar () {
        this.maskStatus = 'hide'
        this.$apply()
      },
      handletologin () {
        this.$navigate('/pages/login/login')
      }
    }
    async onLoad () {
      let self = this
      const unionuser = config.getUnionuser()
      if (unionuser) {
        wepy.showLoading({
          title: 'Âä†ËΩΩ‰∏≠...'
        })
        const weeks_ch = [ 'Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠' ]
        await self.calEmptyGrid(self.currentYear, self.currentMonth)
        await self.calDays(self.currentYear, self.currentMonth)
        let week = self.week
        const thisMonthDays = new Date(moment().format("YYYY"), moment().format("MM"), 0).getDate()
        const theWeekFirstDay = parseInt(moment().startOf('week').format("DD")) // Ëé∑ÂèñÊú¨Âë®ÁöÑÁ¨¨‰∏ÄÂ§©
        for(let i=0;i<7;i++) {
          week[i].day = moment().dayOfYear(theWeekFirstDay+i).format("DD") // ÂàùÂßãÂåñweekÊï∞ÁªÑ
          week[i].date = moment().dayOfYear(theWeekFirstDay+i).format("YYYY-MM-DD") // ÂàùÂßãÂåñweekÊï∞ÁªÑ
        }
        self.weeks_ch = weeks_ch
        self.week = week 
        self.$apply()
      }
    }
    onShow() {
      let self = this
      // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ
      const unionuser = config.getUnionuser()
      self.unionuser = unionuser 
      
      if (unionuser) {
        const { currentDate } = self.data
        const theWeekFirstDay = moment(currentDate).startOf('week').format("YYYY-MM-DD") // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÁ¨¨‰∏ÄÂ§©
        const theWeekLastDay = moment(currentDate).endOf('week').format("YYYY-MM-DD")     // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÊúÄÂêé‰∏ÄÂë®
        self.querySchedule(theWeekFirstDay, theWeekLastDay)
      }
    }
    // ËÆ°ÁÆóÊØè‰∏™ÊúàÁöÑËΩÆÁ©∫Êï∞
    calEmptyGrid (year, month) {
      let self = this
      let firstDayOfWeek = new Date(Date.UTC(year, month - 1, 1)).getDay()
      let empytGrids = []
        if( firstDayOfWeek > 0 ) {
          for (let i = 0; i < firstDayOfWeek; i++) {
            empytGrids.push(i)
          }
          self.empytGrids = empytGrids
          self.hasEmptyGrid = true
          self.$apply();
        } else {
          self.empytGrids = []
          self.hasEmptyGrid = false
          self.$apply();
        }
      // console.log(`ÊØè‰∏™ÊúàÁ©∫Ê†ºÊï∞:${self.empytGrids}`)
    }
    // Ëé∑ÂèñÂΩìÊúàÁöÑÂ§©Êï∞
    calDays (year, month) {
      let self = this 
      const { currentDate } = self.data
      let days = []
      const thisMonthDays = new Date(year, month, 0).getDate() // Ëé∑ÂèñÂΩìÂâçÊúàÁöÑÂ§©Êï∞(eg: 1Êúà 31Â§©)  
      for (let i = 1; i <= thisMonthDays; i++) {
        let choosed = currentDate ==  moment(`${year}-${month}-${i}`, 'YYYY-MM-D').format("YYYY-MM-DD") ? true : false 
        days.push({
          dayDate: moment(`${year}-${month}-${i}`, 'YYYY-MM-D').format("YYYY-MM-DD"),  // ÊØèÂ§©ÁöÑÂÆåÊï¥Êó•Êúü
          day: i,  // ÊØèÂ§©ÁöÑ Êó•
          choosed  // ÊòØÂê¶ÊòØÂΩìÂ§©ÔºåÂ¶ÇÊûúÊòØÂàô‰∏∫true
        })
      }
      self.days = days
      self.$apply()
    }
    // Êü•ËØ¢ËØæÁ®ãË°®
    querySchedule (startDate, endDate) {
      // console.log(`Êü•ËØ¢ËØæË°®ÁöÑÊó∂Èó¥Ôºö${startDate}--${endDate}`)
      let self = this
      const { currentDate, week, currentDayData } = self.data
      // console.log('week:', week)
      services_calendar_week.query({
        params: {
          studentId: 6,
          startDate,
          endDate,
          _info: 'course.teacher.classroom'
        },
        success: (res) => {
          const { list } = res
          let newList = list 
          // ÈÅçÂéÜÊï∞ÊçÆÔºåÁ≠õÈÄâÊØèÂ§©ÁöÑÊï∞ÊçÆÂ≠òÊîæÂú®currentWeekData‰∏≠
          for (var i=0;i<7;i++){
            // ÂèñÂá∫ÊØè‰∏ÄÂ§©ÁöÑÊï∞ÊçÆ
            let aDayCourses = newList.filter( (item) => {
              let time = moment(item.startTime).format('YYYY-MM-DD')
              let theWeekfirstDay = moment(currentDate).startOf('week').add(i, 'd').format("YYYY-MM-DD")
                return time == theWeekfirstDay
            })
            week[i].list = aDayCourses
              for ( let m in week[i].list ) {
                let start = moment(week[i].list[m].startTime.toString(), 'YYYY-MM-DD hh:mm:ss').format("hh:mm")
                let end = moment(week[i].list[m].endTime.toString(), 'YYYY-MM-DD hh:mm:ss').format("hh:mm")
                week[i].list[m].startTime = start
                week[i].list[m].endTime = end
              }
              // Âà§Êñ≠ÊòØÂê¶ÊòØ‰ªäÂ§©ÔºåÂπ∂Â≠òÂÖ•Êï∞ÊçÆ
              if(week[i].date == currentDate){
                self.currentDayData = week[i].list
                self.$apply()
              }
            }
            self.week = week
            self.$apply()
            // console.log('Êú¨Âë®ÁöÑ7Â§©Êï∞ÊçÆÔºö',week)
          // self.weekOfCoursesList = newList
        },
        complete: () => {
          wepy.hideLoading()
        }
      })
    }

    // Ëé∑ÂèñÈÄâ‰∏≠Â§©ÁöÑÊï∞ÊçÆ
    handleQuerySelectedDay (e) {
      let self = this 
      const { currentDayData, week, currentDate } = self.data
      let selectedDay = e.currentTarget.dataset.index  // Ëé∑ÂèñÂΩìÂâçIndex
      let selectedDayCourse = week[selectedDay].list   // ‰ªéweekÂèñÂá∫ÈÄâ‰∏≠Â§©ÁöÑlist
      self.currentDate = week[selectedDay].date        // ÊîπÂèòÈÄâ‰∏≠ÁöÑÂ§©Êó∂ÂÄôÁöÑÊó•Êúü
      self.currentDayData = selectedDayCourse
      self.$apply()
    }
  }
</script>
